---
# Create cluster with nodes

- name: cluster | Set default daemon nodename
  set_fact: scale_cluster_daemon_nodename={{ scale_cluster_daemon_nodename }}
  when: hostvars[inventory_hostname].scale_cluster_daemon_nodename is undefined

- name: cluster | Set default quorum role
  set_fact: scale_cluster_quorum={{ scale_cluster_quorum }}
  when: hostvars[inventory_hostname].scale_cluster_quorum is undefined

- name: cluster | Set default manager role
  set_fact: scale_cluster_manager={{ scale_cluster_manager }}
  when: hostvars[inventory_hostname].scale_cluster_manager is undefined

- meta: refresh_inventory

#
# Inspect existing cluster and inventory
#
- name: cluster | Find existing cluster
  shell: "/usr/lpp/mmfs/bin/mmlscluster -Y | grep -v HEADER | grep clusterSummary | cut -d ':' -f 8"
  register: scale_cluster_clusterId
  changed_when: false
  failed_when: false

- name: cluster | Find existing cluster members
  add_host:
    name: "{{ item }}"
    groups: scale_cluster_members
  when:
    - hostvars[item].scale_cluster_clusterId.stdout
  with_items: "{{ ansible_play_hosts }}"
  changed_when: false

- name: cluster | Find new cluster candidates
  add_host:
    name: "{{ item }}"
    groups: scale_cluster_candidates
  when:
    - not hostvars[item].scale_cluster_clusterId.stdout
    - hostvars[item].scale_cluster_clusterId.stderr
  with_items: "{{ ansible_play_hosts }}"
  changed_when: false

- name: cluster | Find quorum nodes
  add_host:
    name: "{{ item }}"
    groups: scale_cluster_quorum_nodes
  when:
    - hostvars[item].scale_cluster_quorum | bool
  with_items: "{{ ansible_play_hosts }}"
  changed_when: false

#
# Assign default quorum nodes
#
- name: cluster | Assign default quorum nodes
  set_fact: scale_cluster_quorum=true
  when: groups['scale_cluster_quorum_nodes'] is undefined
  with_sequence: start=1 end={{ [ansible_play_hosts | length, 7] | min }}
  run_once: true
  delegate_to: "{{ ansible_play_hosts[item | int - 1] }}"
  delegate_facts: true

#
# Create new cluster
#
- block:  ## run_once: true
    - name: cluster | Prepare new cluster NodeFile
      template: src=NodeFile.j2 dest=/var/tmp/NodeFile

    - name: cluster | Create new cluster
      command: /usr/lpp/mmfs/bin/mmcrcluster -N /var/tmp/NodeFile -C {{ scale_cluster_clustername }}
      notify: accept-licenses
  when:
    - groups['scale_cluster_candidates'] is defined
    - groups['scale_cluster_members'] is undefined
  run_once: true
  delegate_to: "{{ groups['scale_cluster_candidates'].0 }}"

#
# Extend existing cluster
#
- block:  ## run_once: true
    - name: cluster | Prepare existing cluster NodeFile
      template: src=NodeFile.j2 dest=/var/tmp/NodeFile

    - name: cluster | Add new node(s) to cluster
      command: /usr/lpp/mmfs/bin/mmaddnode -N /var/tmp/NodeFile
      notify: accept-licenses
  when:
    - groups['scale_cluster_candidates'] is defined
    - groups['scale_cluster_members'] is defined
  run_once: true
  delegate_to: "{{ groups['scale_cluster_members'].0 }}"

- meta: flush_handlers

#
# Start daemons on new nodes
#
- name: cluster | Start daemons
  command: "/usr/lpp/mmfs/bin/mmstartup -N localhost"
  when: groups['scale_cluster_candidates'] is defined
  with_items: "{{ groups['scale_cluster_candidates'] }}"
  run_once: true
  delegate_to: "{{ item }}"

#
# Wait for daemons to become active
#
- name: cluster | Wait for daemons
  shell: "/usr/lpp/mmfs/bin/mmgetstate -Y -N localhost | grep -v HEADER | cut -d ':' -f 9"
  register: state
  until: state.stdout == "active"
  retries: 10
  delay: 30
  changed_when: false
