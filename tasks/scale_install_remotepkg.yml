---
# Remote package installation method

- name: install | Stat remote installation package
  stat: path={{ scale_install_remotepkg_path }}
  register: scale_install_remotepkg

- name: install | Check remote installation package
  assert:
    that: scale_install_remotepkg.stat.exists
    msg: "Please set the variable 'scale_install_remotepkg_path' to point to the remote installation package!"

#
# Optionally, verify package checksum
#
- name: install | Stat checksum file
  stat: path={{ scale_install_remotepkg_path }}.md5
  register: scale_install_md5_file

- block:  ## when: scale_install_md5_file.stat.exists
    - name: install | Read checksum from file
      slurp: src={{ scale_install_remotepkg_path }}.md5
      register: scale_install_md5_sum

    - name: install | Compare checksums
      vars:
        md5sum: "{{ scale_install_md5_sum.content | b64decode }}"
      assert:
        that: md5sum.strip().split().0 == scale_install_remotepkg.stat.md5
        msg: "Checksums don't match. Please check integritiy of your remote installation package!"
  when: scale_install_md5_file.stat.exists

#
# Extract installation package
#
- name: install | Stat extracted packages
  stat: path=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms
  register: scale_install_gpfs_rpmdir

- name: install | Make installation package executable
  file:
    path: "{{ scale_install_remotepkg_path }}"
    mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists

- name: install | Extract installation package
  command: "{{ scale_install_remotepkg_path + ' --silent' }}"
  args:
    creates: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms

- name: install | Stat extracted packages
  stat: path=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms
  register: scale_install_gpfs_rpmdir

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_rpmdir.stat.exists
      - scale_install_gpfs_rpmdir.stat.isdir
    msg: "The variable 'scale_version' doesn't seem to match the contents of the remote installation package!"

#
# Ensure no daemon running
#
- name: install | Count daemon processes
  command: pgrep mmfsd
  register: scale_install_daemonprocs
  changed_when: false
  failed_when: false

- name: install | Check daemon processes
  debug: msg="Spectrum Scale is running. Please stop it for an upgrade!"
  when: scale_install_daemonprocs.rc == 0

# TODO: if GPFS already installed then check `mmdiag --version` and compare with scale_version
# TODO: -> scale_update.yml

#
# Install RPMs
#
- block:  ## when: scale_install_daemonprocs.rc == 1
    - name: install | Find Global Security Kit (GSKit) RPM
      find:
        paths: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/
        patterns: 'gpfs.gskit-*.{{ scale_architecture }}.rpm'
      register: scale_install_gpfs_gskit

    - name: install | Check valid Global Security Kit (GSKit) RPM
      assert:
        that: scale_install_gpfs_gskit.matched > 0
        msg: "No Global Security Kit (GSKit) RPM found: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/gpfs.gskit-*.{{ scale_architecture }}.rpm"

    - name: install | Install GPFS RPMs
      yum: name=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/{{ item }}.rpm state=present
      when: ansible_pkg_mgr == 'yum'
      with_items:
        - "{{ scale_install_gpfs_rpms }}"
        - "{{ scale_install_gpfs_gskit.files.0.path | basename | regex_replace('.rpm$', '') }}"
  when: scale_install_daemonprocs.rc == 1
