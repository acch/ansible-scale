---
# Local package installation method

- block:  ## run_once: true
    - name: install | Stat local installation package
      stat: path={{ scale_install_localpkg_path }}
      register: scale_install_localpkg

    - name: install | Check local installation package
      assert:
        that: scale_install_localpkg.stat.exists
        msg: "Please set the variable 'scale_install_localpkg_path' to point to the local installation package!"

  #
  # Optionally, verify package checksum
  #
    - name: install | Stat checksum file
      stat: path={{ scale_install_localpkg_path }}.md5
      register: scale_install_md5_file

    - block:  ## when: scale_install_md5_file.stat.exists
        - name: install | Read checksum from file
          set_fact:
            scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

        - name: install | Compare checksums
          assert:
            that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.md5
            msg: "Checksums don't match. Please check integritiy of your local installation package!"
      when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost

#
# Check temporary directory
#
- name: install | Stat temporary directory
  stat: path={{ scale_install_localpkg_tmpdir }}
  register: scale_install_tmp_dir

- name: install | Check temporary directory
  assert:
    that:
      - scale_install_tmp_dir.stat.exists
      - scale_install_tmp_dir.stat.isdir
    msg: "Please set the variable 'scale_install_localpkg_tmpdir' to point to a temporary directory on the remote system!"

#
# Copy installation package
#
- name: install | Stat extracted packages
  stat: path=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms
  register: scale_install_gpfs_rpmdir

- name: install | Copy installation package to node
  copy:
    src: "{{ scale_install_localpkg_path }}"
    dest: "{{ scale_install_localpkg_tmpdir }}"
    mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists

#
# Extract installation package
#
- name: install | Extract installation package
  command: "{{ scale_install_localpkg_tmpdir + '/' + scale_install_localpkg_path | basename + ' --silent' }}"
  args:
    creates: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms

- name: install | Stat extracted packages
  stat: path=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms
  register: scale_install_gpfs_rpmdir

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_rpmdir.stat.exists
      - scale_install_gpfs_rpmdir.stat.isdir
    msg: "The variable 'scale_version' doesn't seem to match the contents of the local installation package!"

#
# Delete installation package
#
- name: install | Delete installation package from node
  file:
    path: "{{ scale_install_localpkg_tmpdir + '/' + scale_install_localpkg_path | basename }}"
    state: absent

#
# Ensure no daemon running
#
- name: install | Count daemon processes
  command: pgrep mmfsd
  register: scale_install_daemonprocs
  changed_when: false
  failed_when: false

- name: install | Check daemon processes
  assert:
    that: scale_install_daemonprocs.rc == 1
    msg: "Spectrum Scale is running. Please stop it for an upgrade!"

#
# Install RPMs
#
- name: install | Find Global Security Kit (GSKit) RPM
  find:
    paths: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/
    patterns: 'gpfs.gskit-*.{{ scale_architecture }}.rpm'
  register: scale_install_gpfs_gskit

- name: install | Check valid Global Security Kit (GSKit) RPM
  assert:
    that: scale_install_gpfs_gskit.matched > 0
    msg: "No Global Security Kit (GSKit) RPM found: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/gpfs.gskit-*.{{ scale_architecture }}.rpm"

- name: install | Install GPFS RPMs
  yum: name=/usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/{{ item }}.rpm state=present
  with_items:
    - "{{ scale_install_gpfs_rpms }}"
    - "{{ scale_install_gpfs_gskit.files.0.path | basename | regex_replace('.rpm$', '') }}"
